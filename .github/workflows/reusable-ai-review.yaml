name: AI Review on PR diff

on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: string
      user_id:
        required: true
        type: string
      environment:
        required: true
        type: string

env:
  # deno が package.json にあるパッケージを deno.lock で管理しようとするのを防ぐ
  # ref: https://github.com/denoland/deno/issues/17916
  DENO_NO_PACKAGE_JSON: 1
  RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

jobs:
  review:
    permissions:
      contents: read
      pull-requests: write
      statuses: write
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: blob:none

      - name: Setup branches
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_DIFF: ${{ runner.temp }}/pr.diff
          HEAD_BRANCH: ai-review-head
        id: setup_branches
        run: |
          # 差分のマークダウンを取得
          echo "diff_markdown_path=$(gh pr diff ${{ inputs.pr_number }} --name-only | grep '.md' | head -1)" >> "$GITHUB_OUTPUT"
          gh pr diff ${{ inputs.pr_number }} > ${{ env.PR_DIFF }}
          cat ${{ env.PR_DIFF }}
          echo "pr_diff_path=${{ env.PR_DIFF }}" >> "$GITHUB_OUTPUT"

          # 常に main ブランチの tools を利用するために一時的に tools をコピー
          mkdir -p ${{ runner.temp }}/ai-review
          \cp -r ./tools ./deno.lock ${{ runner.temp }}/ai-review

          # PR のブランチに切り替える
          gh pr checkout --branch ${{ env.HEAD_BRANCH }} ${{ inputs.pr_number }}
          git branch
          echo "latest_git_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT" # reviewdog によるコメントで必要

          # PR のブランチに tools をコピー
          \cp -f ${{ runner.temp }}/ai-review/deno.lock .
          \cp -rf ${{ runner.temp }}/ai-review/tools .
          ls deno.lock tools

      - name: Set pending status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ steps.setup_branches.outputs.latest_git_sha }}',
              state: 'pending',
              target_url: process.env.RUN_URL,
              description: 'AI Review is in progress',
              context: 'AI Review'
            })

      - uses: ./.github/actions/setup-deno

      - name: Review PR diff with AI
        env:
          LOG_LEVEL: debug
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DENO_NO_PACKAGE_JSON: 1
        run: |
          deno run \
            --allow-env \
            --allow-run=git \
            --allow-write=./tools/dist \
            --allow-read=./articles,${{ steps.setup_branches.outputs.pr_diff_path }} \
            --allow-net=api.openai.com \
            ./tools/reviewDiffWithAi.ts \
            ${{ steps.setup_branches.outputs.diff_markdown_path }} \
            ${{ steps.setup_branches.outputs.pr_diff_path }}

      - name: Summarize AI Review log
        if: always()
        run: |
          {
            echo "# AI Review log"
            echo '```log'
            cat ./tools/dist/ai-review.log
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - uses: reviewdog/action-setup@e04ffabe3898a0af8d0fb1af00c188831c4b5893 # v1.3.2

      - name: Comment on PR with ReviewDog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI_REPO_OWNER: ${{ github.repository_owner }}
          CI_REPO_NAME: ${{ github.event.repository.name }}
          CI_PULL_REQUEST: ${{ inputs.pr_number }}
          CI_COMMIT: ${{ steps.setup_branches.outputs.latest_git_sha }}
        run: |
          GITHUB_ACTIONS='' reviewdog -f=rdjson -reporter=github-pr-review -name=kiba-ai <./tools/dist/rdjson.json

      - name: Comment finish message on PR
        env:
          COMMENT_FILE: ${{ runner.temp }}/ai-review-finished.md
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          {
            echo "@${{ inputs.user_id }} AI Review finished. Please check the review comments."
            echo "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo '```json'
            cat ./tools/dist/ai-usage.json
            echo
            echo '```'
          } >> "$COMMENT_FILE"
          gh pr comment ${{ inputs.pr_number }} --body-file "$COMMENT_FILE"

      - name: Set final status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const state = process.env.JOB_STATUS === 'success' ? 'success' : 'failure';
            const description = state === 'success' ? 'AI Review completed successfully' : 'AI Review failed';
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ steps.setup_branches.outputs.latest_git_sha }}',
              state: state,
              target_url: process.env.RUN_URL,
              description: description,
              context: 'AI Review'
            })
        env:
          JOB_STATUS: ${{ job.status }}
